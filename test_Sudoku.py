import Sudoku

def test_good_sudoku_from_file():
    s = Sudoku.Sudoku("sudoku_games_files/sudoku_easy_01")
    assert type(s) is Sudoku.Sudoku
    assert s.is_valid() is True

def test_good_sudoku_from_array():
    s = Sudoku.Sudoku([
            [8, 0, 0, 0, 0, 0, 6, 0, 0],
            [9, 3, 0, 8, 0, 0, 0, 7, 1],
            [0, 2, 5, 0, 6, 3, 8, 0, 0],
            [0, 6, 1, 0, 0, 0, 0, 0, 0],
            [0, 9, 8, 4, 5, 6, 3, 1, 0],
            [0, 0, 0, 0, 0, 0, 4, 6, 0],
            [0, 0, 3, 9, 8, 0, 7, 5, 0],
            [7, 8, 0, 0, 0, 1, 0, 3, 6],
            [0, 0, 9, 0, 0, 0, 0, 0, 2]
    ])
    assert type(s) is Sudoku.Sudoku
    assert s.is_valid() is True

def test_bad_line():
    # bad line = line 1
    s = Sudoku.Sudoku([
            [8, 0, 0, 0, 8, 0, 6, 0, 0],
            [9, 3, 0, 8, 0, 0, 0, 7, 1],
            [0, 2, 5, 0, 6, 3, 8, 0, 0],
            [0, 6, 1, 0, 0, 0, 0, 0, 0],
            [0, 9, 8, 4, 5, 6, 3, 1, 0],
            [0, 0, 0, 0, 0, 0, 4, 6, 0],
            [0, 0, 3, 9, 8, 0, 7, 5, 0],
            [7, 8, 0, 0, 0, 1, 0, 3, 6],
            [0, 0, 9, 0, 0, 0, 0, 0, 2]
    ])
    assert s.is_valid() is False

def test_bad_col():
    # bad col = col 1
    s = Sudoku.Sudoku([
            [8, 0, 0, 0, 0, 0, 6, 0, 0],
            [9, 3, 0, 8, 0, 0, 0, 7, 1],
            [0, 2, 5, 0, 6, 3, 8, 0, 0],
            [0, 6, 1, 0, 0, 0, 0, 0, 0],
            [0, 9, 8, 4, 5, 6, 3, 1, 0],
            [8, 0, 0, 0, 0, 0, 4, 6, 0],
            [0, 0, 3, 9, 8, 0, 7, 5, 0],
            [7, 8, 0, 0, 0, 1, 0, 3, 6],
            [0, 0, 9, 0, 0, 0, 0, 0, 2]
    ])
    assert s.is_valid() is False

def test_bad_square():
    # bad square = 1, 1
    s = Sudoku.Sudoku([
        [3, 0, 0, 0, 8, 0, 6, 0, 0],
        [9, 3, 0, 8, 0, 0, 0, 7, 1],
        [0, 2, 5, 0, 6, 3, 8, 0, 0],
        [0, 6, 1, 0, 0, 0, 0, 0, 0],
        [0, 9, 8, 4, 5, 6, 3, 1, 0],
        [0, 0, 0, 0, 0, 0, 4, 6, 0],
        [0, 0, 3, 9, 8, 0, 7, 5, 0],
        [7, 8, 0, 0, 0, 1, 0, 3, 6],
        [0, 0, 9, 0, 0, 0, 0, 0, 2]
    ])
    assert s.is_valid() is False


def test_get_forbidden_values_for():
    s = Sudoku.Sudoku([
        [8, 0, 0, 0, 0, 0, 6, 0, 0],
        [9, 3, 0, 8, 0, 0, 0, 7, 1],
        [0, 2, 5, 0, 6, 3, 8, 0, 0],
        [0, 6, 1, 0, 0, 0, 0, 0, 0],
        [0, 9, 8, 4, 5, 6, 3, 1, 0],
        [0, 0, 0, 0, 0, 0, 4, 6, 0],
        [0, 0, 3, 9, 8, 0, 7, 5, 0],
        [7, 8, 0, 0, 0, 1, 0, 3, 6],
        [0, 0, 9, 0, 0, 0, 0, 0, 2]
    ])
    assert(s.get_forbidden_values_for(0, 0) is None)
    assert (s.get_forbidden_values_for(0, 1) == [3, 2, 6, 9, 8, 5])


def test_get_least_constraints():
    s = Sudoku.Sudoku([
        [8, 0, 0, 0, 0, 0, 6, 0, 0],
        [9, 3, 0, 8, 0, 0, 0, 7, 1],
        [0, 2, 5, 0, 6, 3, 8, 0, 0],
        [0, 6, 1, 0, 0, 0, 0, 0, 0],
        [0, 9, 8, 4, 5, 6, 3, 1, 0],
        [0, 0, 0, 0, 0, 0, 4, 6, 0],
        [0, 0, 3, 9, 8, 0, 7, 5, 0],
        [7, 8, 0, 0, 0, 1, 0, 3, 6],
        [0, 0, 9, 0, 0, 0, 0, 0, 2]
    ])
    assert(s.get_least_constraints() == {'score': 4, 'yx': [0, 4]})


def test_get_possibilities_for():
    s = Sudoku.Sudoku([
        [8, 0, 0, 0, 0, 0, 6, 0, 0],
        [9, 3, 0, 8, 0, 0, 0, 7, 1],
        [0, 2, 5, 0, 6, 3, 8, 0, 0],
        [0, 6, 1, 0, 0, 0, 0, 0, 0],
        [0, 9, 8, 4, 5, 6, 3, 1, 0],
        [0, 0, 0, 0, 0, 0, 4, 6, 0],
        [0, 0, 3, 9, 8, 0, 7, 5, 0],
        [7, 8, 0, 0, 0, 1, 0, 3, 6],
        [0, 0, 9, 0, 0, 0, 0, 0, 2]
    ])
    assert (s.get_possibilities_for(0, 1) == [1, 4, 7])

def test_set():
    s = Sudoku.Sudoku([
        [8, 0, 0, 0, 0, 0, 6, 0, 0],
        [9, 3, 0, 8, 0, 0, 0, 7, 1],
        [0, 2, 5, 0, 6, 3, 8, 0, 0],
        [0, 6, 1, 0, 0, 0, 0, 0, 0],
        [0, 9, 8, 4, 5, 6, 3, 1, 0],
        [0, 0, 0, 0, 0, 0, 4, 6, 0],
        [0, 0, 3, 9, 8, 0, 7, 5, 0],
        [7, 8, 0, 0, 0, 1, 0, 3, 6],
        [0, 0, 9, 0, 0, 0, 0, 0, 2]
    ])
    s.set(0, 1, 1)
    assert (s.get_sudoku() == [
        [8, 1, 0, 0, 0, 0, 6, 0, 0],
        [9, 3, 0, 8, 0, 0, 0, 7, 1],
        [0, 2, 5, 0, 6, 3, 8, 0, 0],
        [0, 6, 1, 0, 0, 0, 0, 0, 0],
        [0, 9, 8, 4, 5, 6, 3, 1, 0],
        [0, 0, 0, 0, 0, 0, 4, 6, 0],
        [0, 0, 3, 9, 8, 0, 7, 5, 0],
        [7, 8, 0, 0, 0, 1, 0, 3, 6],
        [0, 0, 9, 0, 0, 0, 0, 0, 2]
    ])
